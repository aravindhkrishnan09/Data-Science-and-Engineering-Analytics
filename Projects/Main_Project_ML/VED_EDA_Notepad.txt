Static Data Load

Created a function 'load_data_excel' to load excel into python
Loaded VED_Static_Data_ICE&HEV into dataframe df_ICE_HEV_original using the above function
Loaded VED_Static_Data_PHEV&EV into dataframe df_ICE_HEV_original using the above function
Created a copy of the original dataframe into df_ICE_HEV and df_PHEV_EV respectively.
Checked unique values in both the dataframe
Replaced 'NO DATA' with nan
Handle data type changes and column renames to concatenate two dataframes
	df_ICE_HEV['Drive Wheels'] = df_ICE_HEV['Drive Wheels'].astype('object')
	df_PHEV_EV.rename(columns={'EngineType': 'Vehicle Type'}, inplace=True)
Created new df_static by concatenating df_ICE_HEV and df_PHEV_EV
Checked unique and number of unique values in the new df_static
Checked duplicates

---------------------------------------------------------------------------------------------------

Dynamic Data Load
Created a function 'load_csv_files_from_directory' to load multiple csv files from a directory into python
Loaded VED_DynamicData_Part1 into dataframe df_part1_original using the above function
Loaded VED_DynamicData_Part2 into dataframe df_part2_original using the above function
Created a copy of the original dataframe into df_part1 and df_part2 respectively.
Checked unique values in both the dataframe
Created new df_dynamic by concatenating df_part1 and df_part2
Checked unique and number of unique values in the new df_dynamic
Checked duplicates

---------------------------------------------------------------------------------------------------

Join Dynamic and Static using left join
Dynamic has 22436808 records and so was not able to join because of RAM size
Even the sample of 50% df_dynamic didnt work, so pulled 50% sample from df_part1 instead of df_dynamic which has 5118478 records
Joined dataframe df with 5118478 entries is created.
Mapped these values to OAT[DegC] values and create a new column 'OAT_Category' (< -20 'Extremely Cold' , -20 to 0 'Cold', 0 to 10 'Cool', 10 to 20 'Mild', 20 to 30 'Warm', > 30 'Hot'):
	def categorize_oat(value):
    if value < -20:
        return 'Extremely Cold'
    elif -20 <= value < 0:
        return 'Cold'
    elif 0 <= value < 10:
        return 'Cool'
    elif 10 <= value < 20:
        return 'Mild'
    elif 20 <= value < 30:
        return 'Warm'
    elif value >= 30:
        return 'Hot'
    else:
        return np.nan

df['OAT_Category'] = df['OAT[DegC]'].apply(categorize_oat)

Converted DayNum to timestamp using vectorized timedelta to create separate columns for df['DateTime'], df['Date'] and df['Time']:

# Reference datetime for DayNum = 1
reference_date = datetime(2017, 11, 1)

# Convert DayNum to timestamp using vectorized timedelta
df['DateTime'] = pd.to_timedelta(df['DayNum'] - 1, unit='D') + reference_date

# Create separate columns for date and time
df['Date'] = df['DateTime'].dt.date

# Create a time column with proper formatting
df['Time'] = df['DateTime'].dt.time

Calculated distance travelled in km using Vehicle Speed[km/h] and Timestamp(ms) - df['Distance[km]'] : df['Distance[km]'] = df['Vehicle Speed[km/h]'] * (df['Timestamp(ms)'] / 3600000)
Calculated FCR based on the Algorithm in IEEE paper - [the VED paper](https://arxiv.org/abs/1905.02081)

Algorithm 1: Estimation of Fuel Consumption Rate (FCR)
Input : FuelRate, MAF, AbsLoad, Displacementeng,
RPMeng, ST FT, LT FT, AFR, ρair
Output: FCR
1 correction = (1 + ST FT/100 + LT FT/100)/AFR
2 if FuelRate is available then
3 return FuelRate
4 else if MAF is available then
5 return MAF * correction
6 else if AbsLoad and RPMeng are available then
7 MAF =
AbsLoad/100*ρair*Displacementeng*RPMeng/120
8 return MAF * correction
9 else
10 return NaN

---------------------------------------------------------------------------------------------------

Plotted few sample charts for EDA
	Average Distance Travelled by Vehicle Types: df_distance = df.groupby(['Vehicle Type'])['Distance[km]'].mean().reset_index().sort_values(by='Distance[km]', ascending=False)
	Average HV Battery Voltage Over Time: df_eot = df.groupby(df['Date'].dt.to_period('D'))['HV Battery Voltage[V]'].mean().reset_index()
	Average Fuel Rate Over Time: df_eof = df.groupby(df['Date'].dt.to_period('D'))['FCR'].mean().reset_index()
	Average Trip Count by Location (Heat Map): df_map = df.groupby(['Latitude[deg]', 'Longitude[deg]'])['Trip'].mean().reset_index()
	Average Trips Over Time: df_trip = df.groupby(df['Date'].dt.to_period('M'))['Trip'].mean().reset_index()
	
Calculated Power using Voltage and Current: df['HV Battery Power[Watts]'] = df['HV Battery Voltage[V]'] * df['HV Battery Current[A]']

---------------------------------------------------------------------------------------------------

Data exploration of Battery Power, Fuel Consumption Rate (FCR) and Battery SOC 
using the features Battery Power, AC Power, Heater Power with respect to OAT_Category and Vehicle Type
df_SOC = df.groupby(['OAT_Category', 'Vehicle Type'])[
    ['HV Battery Power[Watts]', 'Air Conditioning Power[Watts]', 'Heater Power[Watts]','HV Battery SOC[%]','FCR']
].mean().reset_index().sort_values(by='HV Battery SOC[%]', ascending=False)

Data exploration of Battery Power, Fuel Consumption Rate (FCR) 
using the features below with respect to Trip and Vehicle Type
df_EC_trip = df.groupby(['Trip','Vehicle Type'])[
    ['Latitude[deg]',
     'Longitude[deg]',
     'Air Conditioning Power[Watts]',
     'Heater Power[Watts]',
     'Vehicle Speed[km/h]',
       'Distance[km]',
       'Engine RPM[RPM]',
       'OAT[DegC]',
       'Generalized_Weight',
       'FCR',
       'HV Battery Power[Watts]',
       'MAF[g/sec]',
       'Absolute Load[%]',
       'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]',
       'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]'
       ]
].mean().reset_index().sort_values(by=['FCR','HV Battery Power[Watts]'], ascending=False)

Data exploration of Battery Power, Fuel Consumption Rate (FCR) 
using the features below with respect to Date (Month) and Vehicle Type
df_EC_time = df.groupby([df['Date'].dt.to_period('M'), 'Vehicle Type'])[
    ['Latitude[deg]',
     'Longitude[deg]',
     'Air Conditioning Power[Watts]',
     'Heater Power[Watts]',
     'Vehicle Speed[km/h]',
       'Distance[km]',
       'Engine RPM[RPM]',
       'OAT[DegC]',
       'Generalized_Weight',
       'FCR',
       'HV Battery Power[Watts]',
       'MAF[g/sec]',
       'Absolute Load[%]',
       'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]',
       'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]']
].mean().reset_index().sort_values(
    by=['Date', 'FCR', 'HV Battery Power[Watts]'],
)

Data exploration of Battery Power, Fuel Consumption Rate (FCR) 
using the features below with respect to Date (Date) and Vehicle Type
df_EC_time = df.groupby([df['Date'].dt.to_period('D'), 'Vehicle Type'])[
    ['Latitude[deg]',
     'Longitude[deg]',
     'Air Conditioning Power[Watts]',
     'Heater Power[Watts]',
     'Vehicle Speed[km/h]',
       'Distance[km]',
       'Engine RPM[RPM]',
       'OAT[DegC]',
       'Generalized_Weight',
       'FCR',
       'HV Battery Power[Watts]',
       'MAF[g/sec]',
       'Absolute Load[%]',
       'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]',
       'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]']
].mean().reset_index().sort_values(
    by=['Date', 'FCR', 'HV Battery Power[Watts]'],
)

Data exploration of Battery Power, Fuel Consumption Rate (FCR) 
using the features Speed, Absolute Load[%], Engine RPM, OAT, Generalized_Weight with respect to Latitude, Longitude and Vehicle Type
df_la_lo = df.groupby(['Latitude[deg]','Longitude[deg]','Vehicle Type'])[
    ['Vehicle Speed[km/h]', 'Absolute Load[%]','Engine RPM[RPM]','OAT[DegC]','Generalized_Weight','FCR','HV Battery Power[Watts]']
].mean().reset_index().sort_values(by=['FCR','HV Battery Power[Watts]'], ascending=False)

---------------------------------------------------------------------------------------------------

ICE, HEV, EV and PHEV Analysis (Distance vs FCR and HV Battery Power[Watts]

Created Scatter plots to show Energy Consumption Comparison by Vehicle Type by Trip
Distance vs FCR for ICE and HEV
Distance vs HV Battery Power[Watts] for EV and PHEV

Created Scatter plots to show Energy Consumption Comparison by Vehicle Type over Time
Distance vs FCR for ICE and HEV
Distance vs HV Battery Power[Watts] for EV and PHEV

---------------------------------------------------------------------------------------------------

Individual Vehicle Type analysis by Trip: df_ICE, df_HEV, df_EV, df_PHEV
Handled Missing values as it is required during Regression

# Handle missing values

df_ICE.fillna({
    'OAT[DegC]': 15,
    'Generalized_Weight': df_ICE['Generalized_Weight'].mean(),
    'FCR': df_ICE['FCR'].mean(),
    'HV Battery Power[Watts]': 0.0,  # ICE vehicles typically do not have HV Battery Power
    'Air Conditioning Power[Watts]' : 0,
    'Heater Power[Watts]': df_ICE['Heater Power[Watts]'].mean(),
    'MAF[g/sec]': df_ICE['MAF[g/sec]'].mean(),
    'Absolute Load[%]': df_ICE['Absolute Load[%]'].mean(),
    'Short Term Fuel Trim Bank 1[%]': df_ICE['Short Term Fuel Trim Bank 1[%]'].mean(),
    'Short Term Fuel Trim Bank 2[%]': df_ICE['Short Term Fuel Trim Bank 2[%]'].mean(),
    'Long Term Fuel Trim Bank 1[%]': df_ICE['Long Term Fuel Trim Bank 1[%]'].mean(),
    'Long Term Fuel Trim Bank 2[%]': df_ICE['Long Term Fuel Trim Bank 2[%]'].mean()
}, inplace=True)

df_HEV.fillna({
    'OAT[DegC]': 15,
    'FCR': df_HEV['FCR'].mean(),
    'HV Battery Power[Watts]': 0,
    'Air Conditioning Power[Watts]': 0,
    'Heater Power[Watts]': 0,
    'MAF[g/sec]': df_HEV['MAF[g/sec]'].mean(),
    'Absolute Load[%]': df_HEV['Absolute Load[%]'].mean(),
    'Short Term Fuel Trim Bank 1[%]': df_HEV['Short Term Fuel Trim Bank 1[%]'].mean(),
    'Short Term Fuel Trim Bank 2[%]': df_HEV['Short Term Fuel Trim Bank 2[%]'].mean(),
    'Long Term Fuel Trim Bank 1[%]': df_HEV['Long Term Fuel Trim Bank 1[%]'].mean(),
    'Long Term Fuel Trim Bank 2[%]': df_HEV['Long Term Fuel Trim Bank 2[%]'].mean()
}, inplace=True)

df_EV.fillna({
    'Engine RPM[RPM]': 0,  # EVs typically do not have engine RPM
    'FCR': 0,  # EVs typically do not have fuel consumption rate  
    'MAF[g/sec]': 0,
    'Absolute Load[%]': 0,
    'Short Term Fuel Trim Bank 1[%]': 0,
    'Short Term Fuel Trim Bank 2[%]': 0,
    'Long Term Fuel Trim Bank 1[%]': 0,
    'Long Term Fuel Trim Bank 2[%]': 0
}, inplace=True)

df_PHEV.fillna({
    'OAT[DegC]': 15,
    'FCR': df_PHEV['FCR'].mean(),
    'HV Battery Power[Watts]': 0.0,  # PHEVs typically do not have HV Battery Power
    'Air Conditioning Power[Watts]': 0,
    'Heater Power[Watts]': 0,
    'MAF[g/sec]': df_PHEV['MAF[g/sec]'].mean(),
    'Absolute Load[%]': df_PHEV['Absolute Load[%]'].mean(),
    'Short Term Fuel Trim Bank 1[%]': df_PHEV['Short Term Fuel Trim Bank 1[%]'].mean(),
    'Short Term Fuel Trim Bank 2[%]': 0,
    'Long Term Fuel Trim Bank 1[%]': df_PHEV['Long Term Fuel Trim Bank 1[%]'].mean(),
    'Long Term Fuel Trim Bank 2[%]': 0
}, inplace=True)

	
1st Scenario for ICE with features 'Vehicle Speed[km/h]','Distance[km]', 'Engine RPM[RPM]' and Target 'FCR'
Coefficients:
Vehicle Speed[km/h]: 0.0100
Distance[km]: -0.0008
Engine RPM[RPM]: -0.0001
Slope (m): [ 1.00177720e-02 -7.81478866e-04 -6.77039801e-05]
Intercept (b): 0.5825
FCR = 0.0100 * Vehicle Speed[km/h] + -0.0008 * Distance[km] + -0.0001 * Engine RPM[RPM] + 0.5825
R-squared score: 0.3102
Mean Absolute Error: 0.1222
Mean Squared Error: 0.0268
Root Mean Squared Error: 0.1639

2nd Scenario for ICE with features 'Latitude[deg]','Longitude[deg]','Vehicle Speed[km/h]','Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight' and Target 'FCR'
Coefficients:
Latitude[deg]: 0.3966
Longitude[deg]: 0.3935
Vehicle Speed[km/h]: 0.0076
Distance[km]: -0.0022
Engine RPM[RPM]: 0.0002
OAT[DegC]: 0.0013
Generalized_Weight: 0.0002
Slope (m): [ 3.96637813e-01  3.93531578e-01  7.62270412e-03 -2.19456742e-03
  1.60310069e-04  1.34480393e-03  1.78382168e-04]
Intercept (b): 15.9109
FCR = 0.3966 * Latitude[deg] + 0.3935 * Longitude[deg] + 0.0076 * Vehicle Speed[km/h] + -0.0022 * Distance[km] + 0.0002 * Engine RPM[RPM] + 0.0013 * OAT[DegC] + 0.0002 * Generalized_Weight + 15.9109
R-squared score: 0.4843
Mean Absolute Error: 0.1028
Mean Squared Error: 0.0201
Root Mean Squared Error: 0.1417

3rd Scenario for ICE with features 'Vehicle Speed[km/h]', 'Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight' and Target FCR	
Coefficients:
Vehicle Speed[km/h]: 0.0077
Distance[km]: -0.0021
Engine RPM[RPM]: 0.0002
OAT[DegC]: 0.0013
Generalized_Weight: 0.0002
Slope (m): [ 0.00767829 -0.00211231  0.00015705  0.00125734  0.00017501]
Intercept (b): -0.2587
FCR = 0.0077 * Vehicle Speed[km/h] + -0.0021 * Distance[km] + 0.0002 * Engine RPM[RPM] + 0.0013 * OAT[DegC] + 0.0002 * Generalized_Weight + -0.2587
R-squared score: 0.4905
Mean Absolute Error: 0.1022
Mean Squared Error: 0.0198
Root Mean Squared Error: 0.1408

4th Scenario for ICE with features 'Vehicle Speed[km/h]', 'Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight','MAF[g/sec]',
                   'Absolute Load[%]', 'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]', 'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]' and FCR
Coefficients:
Vehicle Speed[km/h]: 0.0016
Distance[km]: -0.0008
Engine RPM[RPM]: 0.0001
OAT[DegC]: 0.0001
Generalized_Weight: 0.0001
MAF[g/sec]: 0.0482
Absolute Load[%]: 0.0039
Short Term Fuel Trim Bank 1[%]: -0.0022
Short Term Fuel Trim Bank 2[%]: 0.0012
Long Term Fuel Trim Bank 1[%]: 0.0078
Long Term Fuel Trim Bank 2[%]: 0.0025
Slope (m): [ 1.60511837e-03 -7.54488180e-04  9.10754147e-05  9.01621927e-05
  6.15069328e-05  4.82018971e-02  3.92000331e-03 -2.23116219e-03
  1.24682274e-03  7.81725235e-03  2.51139337e-03]
Intercept (b): -0.2660
FCR = 0.0016 * Vehicle Speed[km/h] + -0.0008 * Distance[km] + 0.0001 * Engine RPM[RPM] + 0.0001 * OAT[DegC] + 0.0001 * Generalized_Weight + 0.0482 * MAF[g/sec] + 0.0039 * Absolute Load[%] + -0.0022 * Short Term Fuel Trim Bank 1[%] + 0.0012 * Short Term Fuel Trim Bank 2[%] + 0.0078 * Long Term Fuel Trim Bank 1[%] + 0.0025 * Long Term Fuel Trim Bank 2[%] + -0.2660
R-squared score: 0.6159
Mean Absolute Error: 0.0629
Mean Squared Error: 0.0150
Root Mean Squared Error: 0.1223

1st Scenario for HEV with features 'Vehicle Speed[km/h]',
             'Distance[km]',
               'Engine RPM[RPM]',
                 'OAT[DegC]',
                   'Generalized_Weight',
                   'HV Battery Power[Watts]',
                   'MAF[g/sec]',
                   'Absolute Load[%]', 'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]', 'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]' and Target FCR
Coefficients:
Vehicle Speed[km/h]: 0.0000
Distance[km]: -0.0002
Engine RPM[RPM]: -0.0000
OAT[DegC]: 0.0003
Generalized_Weight: 0.0000
HV Battery Power[Watts]: 0.0000
MAF[g/sec]: 0.0650
Absolute Load[%]: 0.0002
Short Term Fuel Trim Bank 1[%]: 0.0088
Short Term Fuel Trim Bank 2[%]: -0.0002
Long Term Fuel Trim Bank 1[%]: 0.0082
Long Term Fuel Trim Bank 2[%]: -0.0010
Slope (m): [ 2.22577081e-05 -1.84089670e-04 -3.22738804e-06  2.54956924e-04
  8.64870015e-06  3.46944695e-18  6.49520875e-02  1.60526024e-04
  8.80473570e-03 -2.20626116e-04  8.16624747e-03 -9.92231760e-04]
Intercept (b): 0.0027
FCR = 0.0000 * Vehicle Speed[km/h] + -0.0002 * Distance[km] + -0.0000 * Engine RPM[RPM] + 0.0003 * OAT[DegC] + 0.0000 * Generalized_Weight + 0.0000 * HV Battery Power[Watts] + 0.0650 * MAF[g/sec] + 0.0002 * Absolute Load[%] + 0.0088 * Short Term Fuel Trim Bank 1[%] + -0.0002 * Short Term Fuel Trim Bank 2[%] + 0.0082 * Long Term Fuel Trim Bank 1[%] + -0.0010 * Long Term Fuel Trim Bank 2[%] + 0.0027
R-squared score: 0.9218
Mean Absolute Error: 0.0189
Mean Squared Error: 0.0019
Root Mean Squared Error: 0.0434

1st Scenario for EV with features 'Latitude[deg]',
            'Longitude[deg]',
            'Air Conditioning Power[Watts]',
            'Heater Power[Watts]',
            'Vehicle Speed[km/h]',
            'Distance[km]',
            'OAT[DegC]',
            'Generalized_Weight' and Target HV Battery Power[Watts]
Coefficients:
Latitude[deg]: -20058.1075
Longitude[deg]: 4379.2150
Air Conditioning Power[Watts]: -1.7688
Heater Power[Watts]: -1.3790
Vehicle Speed[km/h]: -109.9767
Distance[km]: -60.3736
OAT[DegC]: 27.1620
Generalized_Weight: 0.0000
Slope (m): [-2.00581075e+04  4.37921499e+03 -1.76883848e+00 -1.37902197e+00
 -1.09976662e+02 -6.03736431e+01  2.71619734e+01  0.00000000e+00]
Intercept (b): 1214123.7218
FCR = -20058.1075 * Latitude[deg] + 4379.2150 * Longitude[deg] + -1.7688 * Air Conditioning Power[Watts] + -1.3790 * Heater Power[Watts] + -109.9767 * Vehicle Speed[km/h] + -60.3736 * Distance[km] + 27.1620 * OAT[DegC] + 0.0000 * Generalized_Weight + 1214123.7218
R-squared score: 0.3170
Mean Absolute Error: 1279.1498
Mean Squared Error: 2390090.0414
Root Mean Squared Error: 1545.9916

1st Scenario for PHEV with features 'Latitude[deg]',
            'Longitude[deg]',
            'Engine RPM[RPM]',
            'Air Conditioning Power[Watts]',
            'Heater Power[Watts]',
            'Vehicle Speed[km/h]',
            'Distance[km]',
            'OAT[DegC]',
            'Generalized_Weight' and Target HV Battery Power[Watts]
Coefficients:
Latitude[deg]: -378.2081
Longitude[deg]: -12945.4227
Engine RPM[RPM]: 8.2099
Air Conditioning Power[Watts]: -1.3827
Heater Power[Watts]: 0.0000
Vehicle Speed[km/h]: -179.8071
Distance[km]: 49.6205
OAT[DegC]: 130.3819
Generalized_Weight: -1.9808
Slope (m): [-3.78208057e+02 -1.29454227e+04  8.20989059e+00 -1.38271337e+00
  1.94262384e-10 -1.79807073e+02  4.96205321e+01  1.30381928e+02
 -1.98077645e+00]
Intercept (b): -1061786.1065
FCR = -378.2081 * Latitude[deg] + -12945.4227 * Longitude[deg] + 8.2099 * Engine RPM[RPM] + -1.3827 * Air Conditioning Power[Watts] + 0.0000 * Heater Power[Watts] + -179.8071 * Vehicle Speed[km/h] + 49.6205 * Distance[km] + 130.3819 * OAT[DegC] + -1.9808 * Generalized_Weight + -1061786.1065
R-squared score: 0.8219
Mean Absolute Error: 1671.8058
Mean Squared Error: 4438998.7176
Root Mean Squared Error: 2106.8931

---------------------------------------------------------------------------------------------------
Individual Vehicle Type analysis by Time (Date): df_ICE, df_HEV, df_EV, df_PHEV
Handled Missing values as it is required during Regression

1st Scenario for ICE with features 'Vehicle Speed[km/h]','Distance[km]', 'Engine RPM[RPM]' and Target 'FCR'
Coefficients:
Vehicle Speed[km/h]: 0.0119
Distance[km]: 0.0099
Engine RPM[RPM]: -0.0000
Slope (m): [ 1.19458365e-02  9.92499352e-03 -3.92327965e-05]
Intercept (b): 0.3977
FCR = 0.0119 * Vehicle Speed[km/h] + 0.0099 * Distance[km] + -0.0000 * Engine RPM[RPM] + 0.3977
R-squared score: 0.4515
Mean Absolute Error: 0.0318
Mean Squared Error: 0.0015
Root Mean Squared Error: 0.0390

2nd Scenario for ICE with features 'Latitude[deg]','Longitude[deg]','Vehicle Speed[km/h]','Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight' and Target 'FCR'
Coefficients:
Latitude[deg]: -1.4831
Longitude[deg]: -2.3314
Vehicle Speed[km/h]: 0.0074
Distance[km]: 0.0035
Engine RPM[RPM]: 0.0004
OAT[DegC]: 0.0009
Generalized_Weight: 0.0003
Slope (m): [-1.48306626e+00 -2.33140066e+00  7.42835641e-03  3.48140437e-03
  4.29092687e-04  9.22137986e-04  2.77332859e-04]
Intercept (b): -133.5514
FCR = -1.4831 * Latitude[deg] + -2.3314 * Longitude[deg] + 0.0074 * Vehicle Speed[km/h] + 0.0035 * Distance[km] + 0.0004 * Engine RPM[RPM] + 0.0009 * OAT[DegC] + 0.0003 * Generalized_Weight + -133.5514
R-squared score: 0.6486
Mean Absolute Error: 0.0233
Mean Squared Error: 0.0010
Root Mean Squared Error: 0.0313

3rd Scenario for ICE with features 'Vehicle Speed[km/h]', 'Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight' and Target FCR	
Coefficients:
Vehicle Speed[km/h]: 0.0067
Distance[km]: 0.0037
Engine RPM[RPM]: 0.0005
OAT[DegC]: 0.0011
Generalized_Weight: 0.0003
Slope (m): [0.00668397 0.00365921 0.00049977 0.0010579  0.00026238]
Intercept (b): -1.0552
FCR = 0.0067 * Vehicle Speed[km/h] + 0.0037 * Distance[km] + 0.0005 * Engine RPM[RPM] + 0.0011 * OAT[DegC] + 0.0003 * Generalized_Weight + -1.0552
R-squared score: 0.6922
Mean Absolute Error: 0.0232
Mean Squared Error: 0.0009
Root Mean Squared Error: 0.0292

4th Scenario for ICE with features 'Vehicle Speed[km/h]', 'Distance[km]', 'Engine RPM[RPM]', 'OAT[DegC]', 'Generalized_Weight','MAF[g/sec]',
                   'Absolute Load[%]', 'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]', 'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]' and Target FCR	
Coefficients:
Vehicle Speed[km/h]: 0.0008
Distance[km]: -0.0001
Engine RPM[RPM]: 0.0000
OAT[DegC]: 0.0001
Generalized_Weight: 0.0001
MAF[g/sec]: 0.0545
Absolute Load[%]: -0.0006
Short Term Fuel Trim Bank 1[%]: 0.0122
Short Term Fuel Trim Bank 2[%]: -0.0042
Long Term Fuel Trim Bank 1[%]: 0.0093
Long Term Fuel Trim Bank 2[%]: 0.0007
Slope (m): [ 8.21025696e-04 -9.01985764e-05  1.06617717e-05  8.36519613e-05
  5.96878267e-05  5.45067900e-02 -5.73463903e-04  1.22186713e-02
 -4.17321244e-03  9.27173407e-03  6.88926664e-04]
Intercept (b): -0.0641
FCR = 0.0008 * Vehicle Speed[km/h] + -0.0001 * Distance[km] + 0.0000 * Engine RPM[RPM] + 0.0001 * OAT[DegC] + 0.0001 * Generalized_Weight + 0.0545 * MAF[g/sec] + -0.0006 * Absolute Load[%] + 0.0122 * Short Term Fuel Trim Bank 1[%] + -0.0042 * Short Term Fuel Trim Bank 2[%] + 0.0093 * Long Term Fuel Trim Bank 1[%] + 0.0007 * Long Term Fuel Trim Bank 2[%] + -0.0641
R-squared score: 0.8635
Mean Absolute Error: 0.0156
Mean Squared Error: 0.0004
Root Mean Squared Error: 0.0195

1st Scenario for HEV with features 'Vehicle Speed[km/h]',
             'Distance[km]',
               'Engine RPM[RPM]',
                 'OAT[DegC]',
                   'Generalized_Weight',
                   'HV Battery Power[Watts]',
                   'MAF[g/sec]',
                   'Absolute Load[%]', 'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]', 'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]' and Target FCR
Coefficients:
Vehicle Speed[km/h]: 0.0006
Distance[km]: -0.0004
Engine RPM[RPM]: -0.0000
OAT[DegC]: 0.0001
Generalized_Weight: 0.0000
HV Battery Power[Watts]: 0.0000
MAF[g/sec]: 0.0642
Absolute Load[%]: 0.0008
Short Term Fuel Trim Bank 1[%]: 0.0042
Short Term Fuel Trim Bank 2[%]: 0.0001
Long Term Fuel Trim Bank 1[%]: 0.0021
Long Term Fuel Trim Bank 2[%]: -0.0007
Slope (m): [ 5.98583615e-04 -4.43350154e-04 -1.35557499e-05  1.08935467e-04
  1.20989532e-05  4.51028104e-17  6.42240794e-02  8.40500358e-04
  4.24817254e-03  7.75759806e-05  2.11864599e-03 -7.15950282e-04]
Intercept (b): -0.0392
FCR = 0.0006 * Vehicle Speed[km/h] + -0.0004 * Distance[km] + -0.0000 * Engine RPM[RPM] + 0.0001 * OAT[DegC] + 0.0000 * Generalized_Weight + 0.0000 * HV Battery Power[Watts] + 0.0642 * MAF[g/sec] + 0.0008 * Absolute Load[%] + 0.0042 * Short Term Fuel Trim Bank 1[%] + 0.0001 * Short Term Fuel Trim Bank 2[%] + 0.0021 * Long Term Fuel Trim Bank 1[%] + -0.0007 * Long Term Fuel Trim Bank 2[%] + -0.0392
R-squared score: 0.9760
Mean Absolute Error: 0.0043
Mean Squared Error: 0.0000
Root Mean Squared Error: 0.0062

1st Scenario for EV with features 'Latitude[deg]',
            'Longitude[deg]',
            'Air Conditioning Power[Watts]',
            'Heater Power[Watts]',
            'Vehicle Speed[km/h]',
            'Distance[km]',
            'OAT[DegC]',
            'Generalized_Weight' and Target HV Battery Power[Watts]
Coefficients:
Latitude[deg]: -33776.0313
Longitude[deg]: 3699.4443
Air Conditioning Power[Watts]: -1.8578
Heater Power[Watts]: -1.5045
Vehicle Speed[km/h]: -135.9945
Distance[km]: 73.4439
OAT[DegC]: -15.2276
Generalized_Weight: 0.0000
Slope (m): [-3.37760313e+04  3.69944431e+03 -1.85780570e+00 -1.50451438e+00
 -1.35994532e+02  7.34438547e+01 -1.52276293e+01  0.00000000e+00]
Intercept (b): 1737674.6321
FCR = -33776.0313 * Latitude[deg] + 3699.4443 * Longitude[deg] + -1.8578 * Air Conditioning Power[Watts] + -1.5045 * Heater Power[Watts] + -135.9945 * Vehicle Speed[km/h] + 73.4439 * Distance[km] + -15.2276 * OAT[DegC] + 0.0000 * Generalized_Weight + 1737674.6321
R-squared score: 0.5422
Mean Absolute Error: 1145.0304
Mean Squared Error: 2464658.5797
Root Mean Squared Error: 1569.9231

2nd Scenario for PHEV with features 'Latitude[deg]',
            'Longitude[deg]',
            'Engine RPM[RPM]',
            'Air Conditioning Power[Watts]',
            'Heater Power[Watts]',
            'Vehicle Speed[km/h]',
            'Distance[km]',
            'OAT[DegC]',
            'Generalized_Weight' and Target HV Battery Power[Watts]
Coefficients:
Latitude[deg]: 4181.7666
Longitude[deg]: -7432.2033
Engine RPM[RPM]: 8.7282
Air Conditioning Power[Watts]: -0.6312
Heater Power[Watts]: 0.0000
Vehicle Speed[km/h]: -163.3520
Distance[km]: 51.2449
OAT[DegC]: 130.4820
Generalized_Weight: -0.9121
Slope (m): [ 4.18176655e+03 -7.43220330e+03  8.72824430e+00 -6.31182261e-01
  6.18882723e-11 -1.63351968e+02  5.12449366e+01  1.30482048e+02
 -9.12114964e-01]
Intercept (b): -797775.9883
FCR = 4181.7666 * Latitude[deg] + -7432.2033 * Longitude[deg] + 8.7282 * Engine RPM[RPM] + -0.6312 * Air Conditioning Power[Watts] + 0.0000 * Heater Power[Watts] + -163.3520 * Vehicle Speed[km/h] + 51.2449 * Distance[km] + 130.4820 * OAT[DegC] + -0.9121 * Generalized_Weight + -797775.9883
R-squared score: 0.8408
Mean Absolute Error: 669.1716
Mean Squared Error: 808814.6406
Root Mean Squared Error: 899.3412


-------------------------------------------------------------------------------------------------

Index(['DayNum', 'VehId', 'Trip', 'Timestamp(ms)', 'Latitude[deg]',
       'Longitude[deg]', 'Vehicle Speed[km/h]', 'MAF[g/sec]',
       'Engine RPM[RPM]', 'Absolute Load[%]', 'OAT[DegC]', 'Fuel Rate[L/hr]',
       'Air Conditioning Power[kW]', 'Air Conditioning Power[Watts]',
       'Heater Power[Watts]', 'HV Battery Current[A]', 'HV Battery SOC[%]',
       'HV Battery Voltage[V]', 'Short Term Fuel Trim Bank 1[%]',
       'Short Term Fuel Trim Bank 2[%]', 'Long Term Fuel Trim Bank 1[%]',
       'Long Term Fuel Trim Bank 2[%]', 'Vehicle Type', 'Vehicle Class',
       'Engine Configuration & Displacement', 'Transmission', 'Drive Wheels',
       'Generalized_Weight', 'OAT_Category', 'DateTime', 'Date', 'Time',
       'Distance[km]'],
      dtype='object')